package fanin

import "sync"

// FanIn объединяет несколько входных каналов в один выходной канал.
// Это реализация паттерна "Fan-in" (воронка), который собирает данные из
// нескольких источников в один поток.
//
// Принцип работы:
//   - Для каждого входного канала запускается отдельная горутина
//   - Каждая горутина читает данные из своего канала и отправляет в общий выходной
//   - Когда все входные каналы закрыты, выходной канал также закрывается
//
// Параметры:
//
//	cs - variadic параметр, принимающий произвольное количество каналов только для чтения
//
// Возвращает:
//
//	Выходной канал только для чтения (<-chan any) с объединенными данными
//
// Особенности:
//   - Порядок элементов в выходном канале не гарантируется
//   - Все горутины завершаются корректно при закрытии входных каналов
//   - Использует sync.WaitGroup для синхронизации завершения горутин
func FanIn(cs ...<-chan any) <-chan any {
	var wg sync.WaitGroup
	// Создаем выходной канал для объединенных данных
	out := make(chan any)

	// output - вспомогательная функция, которая читает данные из одного канала
	// и отправляет их в выходной канал до тех пор, пока канал не будет закрыт
	output := func(c <-chan any) {
		// Читаем все данные из канала-источника
		for n := range c {
			// Отправляем прочитанные данные в выходной канал
			out <- n
		}
		// Сигнализируем о завершении работы с этим каналом
		wg.Done()
	}

	// Устанавливаем количество горутин, которые нужно ожидать
	// Равно количеству переданных входных каналов
	wg.Add(len(cs))

	// Запускаем горутину для каждого входного канала
	for _, c := range cs {
		// Каждая горутина обрабатывает свой канал независимо
		go output(c)
	}

	// Запускаем отдельную горутину для закрытия выходного канала
	// Эта горутина ждет завершения всех worker-горутин
	go func() {
		// Ожидаем завершения всех горутин, обрабатывающих входные каналы
		wg.Wait()
		// Закрываем выходной канал после обработки всех входных данных
		// Это сигнализирует потребителям, что данных больше не будет
		close(out)
	}()

	// Возвращаем выходной канал (преобразованный в read-only)
	return out
}
