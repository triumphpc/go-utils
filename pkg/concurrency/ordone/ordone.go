// Package ordone предоставляет паттерн OrDone для безопасной работы с каналами.
// Паттерн позволяет избежать утечек горутин и обеспечивает корректную обработку
// сигналов завершения через done-канал.
package ordone

// OrDone создает обертку вокруг канала, которая гарантирует:
// 1. Завершение работы при получении сигнала из done-канала
// 2. Завершение работы при закрытии исходного канала
// 3. Безопасное чтение значений с учетом сигналов завершения
//
// Параметры:
//   - done: канал для сигнала прерывания (может быть nil)
//   - c: исходный канал для чтения данных
//
// Возвращает: безопасный канал для чтения, который автоматически закрывается
// при выполнении условий завершения.
//
// Пример использования:
//
//	done := make(chan interface{})
//	defer close(done)
//
//	for val := range OrDone(done, myChan) {
//	    // Обработка значения с гарантией завершения при сигнале done
//	}
func OrDone(done, c <-chan interface{}) <-chan interface{} {
	valStream := make(chan interface{})

	go func() {
		defer close(valStream)

		for {
			select {
			case <-done:
				// Получен сигнал завершения - выходим
				return
			case v, ok := <-c:
				if !ok {
					// Исходный канал закрыт - выходим
					return
				}

				// Безопасная отправка значения с проверкой done
				select {
				case valStream <- v:
				case <-done:
					// Получен сигнал завершения во время отправки
					return
				}
			}
		}
	}()

	return valStream
}
